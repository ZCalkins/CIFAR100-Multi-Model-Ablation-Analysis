import torch.nn as nn
import torch.optim as optim
import torch.optim.lr_scheduler as lr_scheduler
from models import cnn_model

cnn_model.CNNModelConfig.base() = {
    'model_name': 'CNN_Baseline',
    'optimizer': 'adam',
    'learning_rate': 0.001,
    'loss_function': nn.CrossEntropyLoss(),
    'loss_params': {'label_smoothing': 0.0},
    'scheduler': None, 
    'batch_size': 32,
    'num_epochs': 10,
    'layers':[
    {
        'in_channels': 3,
        'out_channels': 32,
        'kernel_size': 3,
        'stride': 1,
        'padding': 1,
        'use_batch_norm': True,
        'use_pool': False,
        'pool_size': 2,
        'pool_stride': 2
    },
    {
        'in_channels': 32,
        'out_channels': 32,
        'kernel_size': 3,
        'stride': 1,
        'padding': 1,
        'use_batch_norm': True,
        'use_pool': True,
        'pool_size': 2,
        'pool_stride': 2
    },
    {
        'in_channels': 32,
        'out_channels': 32,
        'kernel_size': 3,
        'stride': 1,
        'padding': 1,
        'use_batch_norm': True,
        'use_pool': False,
        'pool_size': 2,
        'pool_stride': 2
    },
    {
        'in_channels': 32,
        'out_channels': 64,
        'kernel_size': 5,
        'stride': 1,
        'padding': 1,
        'use_batch_norm': True,
        'use_pool': True,
        'pool_size': 2,
        'pool_stride': 2
    },
    {
        'in_channels': 64,
        'out_channels': 64,
        'kernel_size': 5,
        'stride': 1,
        'padding': 1,
        'use_batch_norm': True,
        'use_pool': False,
        'pool_size': 2,
        'pool_stride': 2
    },
    {
        'in_channels': 64,
        'out_channels': 100,
        'kernel_size': 7,
        'stride': 1,
        'padding': 1,
        'use_batch_norm': True,
        'use_pool': False,
        'pool_size': 2,
        'pool_stride': 2
    }
]}

# Dropout Ablation

dropout_variation/CNNModelConfig.layers = [
    {
        'in_channels': 3,
        'out_channels': 32,
        'kernel_size': 3,
        'stride': 1,
        'padding': 1,
        'use_batch_norm': True,
        'use_pool': False,
        'pool_size': 2,
        'pool_stride': 2,
        'use_dropout': True,
        'dropout_rate': 0.2
    },
    {
        'in_channels': 32,
        'out_channels': 32,
        'kernel_size': 3,
        'stride': 1,
        'padding': 1,
        'use_batch_norm': True,
        'use_pool': True,
        'pool_size': 2,
        'pool_stride': 2,
        'use_dropout': True,
        'dropout_rate': 0.2
    },
    {
        'in_channels': 32,
        'out_channels': 32,
        'kernel_size': 3,
        'stride': 1,
        'padding': 1,
        'use_batch_norm': True,
        'use_pool': False,
        'pool_size': 2,
        'pool_stride': 2,
        'use_dropout': True,
        'dropout_rate': 0.2
    },
    {
        'in_channels': 32,
        'out_channels': 64,
        'kernel_size': 5,
        'stride': 1,
        'padding': 1,
        'use_batch_norm': True,
        'use_pool': True,
        'pool_size': 2,
        'pool_stride': 2,
        'use_dropout': True,
        'dropout_rate': 0.3
    },
    {
        'in_channels': 64,
        'out_channels': 64,
        'kernel_size': 5,
        'stride': 1,
        'padding': 1,
        'use_batch_norm': True,
        'use_pool': False,
        'pool_size': 2,
        'pool_stride': 2,
        'use_dropout': True,
        'dropout_rate': 0.4
    },
    {
        'in_channels': 64,
        'out_channels': 100,
        'kernel_size': 7,
        'stride': 1,
        'padding': 1,
        'use_batch_norm': True,
        'use_pool': False,
        'pool_size': 2,
        'pool_stride': 2,
        'use_dropout': True,
        'dropout_rate': 0.5
    }
]}

# Pooling Ablation
pooling_variation/CNNModelConfig.pool_type = 
    {
        'in_channels': 3,
        'out_channels': 32,
        'kernel_size': 3,
        'stride': 1,
        'padding': 1,
        'use_batch_norm': True,
        'use_pool': False,
        'pool_size': 2,
        'pool_stride': 2,
        'pool_type': 'average'
    },
    {
        'in_channels': 32,
        'out_channels': 32,
        'kernel_size': 3,
        'stride': 1,
        'padding': 1,
        'use_batch_norm': True,
        'use_pool': True,
        'pool_size': 2,
        'pool_stride': 2,
        'pool_type': 'average'
    },
    {
        'in_channels': 32,
        'out_channels': 32,
        'kernel_size': 3,
        'stride': 1,
        'padding': 1,
        'use_batch_norm': True,
        'use_pool': False,
        'pool_size': 2,
        'pool_stride': 2,
        'pool_type': 'average'
    },
    {
        'in_channels': 32,
        'out_channels': 64,
        'kernel_size': 5,
        'stride': 1,
        'padding': 1,
        'use_batch_norm': True,
        'use_pool': True,
        'pool_size': 2,
        'pool_stride': 2,
        'pool_type': 'average'
    },
    {
        'in_channels': 64,
        'out_channels': 64,
        'kernel_size': 5,
        'stride': 1,
        'padding': 1,
        'use_batch_norm': True,
        'use_pool': False,
        'pool_size': 2,
        'pool_stride': 2,
        'pool_type': 'average'
    },
    {
        'in_channels': 64,
        'out_channels': 100,
        'kernel_size': 7,
        'stride': 1,
        'padding': 1,
        'use_batch_norm': True,
        'use_pool': True,
        'pool_size': 2,
        'pool_stride': 2,
        'pool_type': 'average'
    }
]}

# Optimizer Ablation
optimizer_variation/CNNModelConfig.optimizer = 'sgd'
optimizer_variation/CNNModelConfig.learning_rate = 0.001

# Batch Ablation
batch_variation/CNNModelConfig.batch_size = 64

# Epoch Ablation
epoch_variation/CNNModelConfig.num_epochs = 20

# Cosine Annealing Ablation
cosine_annealing_variation/CNNModelConfig.scheduler = lr_scheduler.CosineAnnealingLR()
cosine_annealing_variation/CNNModelConfig.scheduler_params = {'T_max': 10}

# Label Smoothing Ablation
label_smoothing_variation/CNNModelConfig.loss_function = nn.CrossEntropyLoss()
label_smoothing_variation/CNNModelConfig.loss_params = {'label_smoothing': 0.1}
